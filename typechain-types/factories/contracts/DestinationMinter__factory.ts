/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  DestinationMinter,
  DestinationMinterInterface,
} from "../../contracts/DestinationMinter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "contract MyNFT",
        name: "_nft",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_gameId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "MintCallSuccessfull",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftAddr",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "NFTBridgeBackInitiated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "receiveNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161073a38038061073a8339818101604052810190610032919061018c565b806001819055508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506101df565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e5826100ba565b9050919050565b6100f5816100da565b811461010057600080fd5b50565b600081519050610112816100ec565b92915050565b6000610123826100da565b9050919050565b61013381610118565b811461013e57600080fd5b50565b6000815190506101508161012a565b92915050565b6000819050919050565b61016981610156565b811461017457600080fd5b50565b60008151905061018681610160565b92915050565b6000806000606084860312156101a5576101a46100b5565b5b60006101b386828701610103565b93505060206101c486828701610141565b92505060406101d586828701610177565b9150509250925092565b6080516105406101fa600039600061015201526105406000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063150b7a021461003b578063319d63e51461006b575b600080fd5b6100556004803603810190610050919061038a565b610087565b604051610062919061044d565b60405180910390f35b61008560048036038101906100809190610468565b610150565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146100e257600080fd5b833373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f39055c5fac60ae123553559d012cb4adb8b910f6fa8906299ac88f8c0bd4f5f360405160405180910390a463150b7a0260e01b905095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101a857600080fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b81526004016102039291906104c6565b600060405180830381600087803b15801561021d57600080fd5b505af1158015610231573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167f98dff3b947d7993b446e8949919e77754e7ecc1fd079b50e1604ae4311584dea8260405161027b91906104ef565b60405180910390a25050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102bc82610291565b9050919050565b6102cc816102b1565b81146102d757600080fd5b50565b6000813590506102e9816102c3565b92915050565b6000819050919050565b610302816102ef565b811461030d57600080fd5b50565b60008135905061031f816102f9565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261034a57610349610325565b5b8235905067ffffffffffffffff8111156103675761036661032a565b5b6020830191508360018202830111156103835761038261032f565b5b9250929050565b6000806000806000608086880312156103a6576103a5610287565b5b60006103b4888289016102da565b95505060206103c5888289016102da565b94505060406103d688828901610310565b935050606086013567ffffffffffffffff8111156103f7576103f661028c565b5b61040388828901610334565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61044781610412565b82525050565b6000602082019050610462600083018461043e565b92915050565b6000806040838503121561047f5761047e610287565b5b600061048d858286016102da565b925050602061049e85828601610310565b9150509250929050565b6104b1816102b1565b82525050565b6104c0816102ef565b82525050565b60006040820190506104db60008301856104a8565b6104e860208301846104b7565b9392505050565b600060208201905061050460008301846104b7565b9291505056fea2646970667358221220462c726b63c44348c07de404270589db543a06761fd3cf285eb1a7df66d4e87c64736f6c63430008140033";

type DestinationMinterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DestinationMinterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DestinationMinter__factory extends ContractFactory {
  constructor(...args: DestinationMinterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    router: AddressLike,
    _nft: AddressLike,
    _gameId: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(router, _nft, _gameId, overrides || {});
  }
  override deploy(
    router: AddressLike,
    _nft: AddressLike,
    _gameId: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(router, _nft, _gameId, overrides || {}) as Promise<
      DestinationMinter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DestinationMinter__factory {
    return super.connect(runner) as DestinationMinter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DestinationMinterInterface {
    return new Interface(_abi) as DestinationMinterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DestinationMinter {
    return new Contract(address, _abi, runner) as unknown as DestinationMinter;
  }
}
