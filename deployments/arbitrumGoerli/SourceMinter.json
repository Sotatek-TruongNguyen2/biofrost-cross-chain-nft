{
  "address": "0x09833b8ba6031F1c3BCD63b26fA024DCd3c0af9A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "originalGameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destinationGameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destinationChainSelector",
          "type": "uint256"
        }
      ],
      "name": "NFTBridgeInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "originalGameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destinationGameId",
          "type": "uint256"
        }
      ],
      "name": "NFTBridgeUnLocked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originalGameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "destinationGameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "destinationChainSelector",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "destinationChainSelector",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf176cd9e9e6532dbe192b7aae6f5fe1a814e5801edf2a35728f52a2fd9b0b821",
  "receipt": {
    "to": null,
    "from": "0x5E699389821850Ea35f5A1f99384DF3E1B4C118b",
    "contractAddress": "0x09833b8ba6031F1c3BCD63b26fA024DCd3c0af9A",
    "transactionIndex": 1,
    "gasUsed": "544219",
    "logsBloom": "0x
    "blockHash": "0x36572882c4b840b9858adc73841c636ea75cc8b3bec2aaa4f79bc7bea2a74ffa",
    "transactionHash": "0xf176cd9e9e6532dbe192b7aae6f5fe1a814e5801edf2a35728f52a2fd9b0b821",
    "logs": [],
    "blockNumber": 57638510,
    "cumulativeGasUsed": "544219",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5E699389821850Ea35f5A1f99384DF3E1B4C118b"
  ],
  "numDeployments": 1,
  "solcInputHash": "382663e0dd96181bdd325c730887dd21",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalGameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationGameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationChainSelector\",\"type\":\"uint256\"}],\"name\":\"NFTBridgeInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalGameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationGameId\",\"type\":\"uint256\"}],\"name\":\"NFTBridgeUnLocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalGameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationGameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainSelector\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainSelector\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY. THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE. DO NOT USE THIS CODE IN PRODUCTION.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SourceMinter.sol\":\"SourceMinter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/SourceMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IERC721Receiver } from \\\"./interfaces/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IERC20 } from \\\"./interfaces/IERC20.sol\\\";\\n\\n/**\\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\\n * DO NOT USE THIS CODE IN PRODUCTION.\\n */\\ncontract SourceMinter is IERC721Receiver {\\n    address immutable i_router;\\n\\n    struct NFTBridgeLocked {\\n        uint tokenId;\\n        uint originalGameId;\\n        uint destinationGameId;\\n        uint destinationChainSelector;\\n    }\\n\\n    event NFTBridgeInitiated(address indexed user, address indexed nftAddr, uint indexed tokenId, uint originalGameId, uint256 destinationGameId, uint destinationChainSelector);\\n    event NFTBridgeUnLocked(address indexed user, address indexed nftAddr, uint indexed tokenId, uint256 originalGameId, uint256 destinationGameId);\\n\\n    mapping(address => mapping(address => mapping(uint256 => NFTBridgeLocked))) public locked;\\n\\n    constructor(address router) {\\n        i_router = router;\\n    }\\n\\n    receive() external payable {}\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        // TODO - fix decode data send with calldata\\n        (uint originalGameId, uint destinationGameId, uint destinationChainSelector) = abi.decode(data, (uint,uint,uint));\\n\\n        locked[from][msg.sender][tokenId] = NFTBridgeLocked({\\n            tokenId: tokenId,\\n            originalGameId: originalGameId,\\n            destinationGameId: destinationGameId,\\n            destinationChainSelector: destinationChainSelector\\n        });\\n\\n        emit NFTBridgeInitiated(from, msg.sender, tokenId, originalGameId, destinationGameId, destinationChainSelector);\\n\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function unlock(\\n        address receiver,\\n        address nft,\\n        uint tokenId,\\n        uint destinationChainSelector\\n    ) external {\\n        require(msg.sender == i_router);\\n\\n        NFTBridgeLocked memory nftLocked = locked[receiver][nft][tokenId];\\n\\n        if (nftLocked.destinationChainSelector == destinationChainSelector) {\\n            IERC721(nft).safeTransferFrom(address(this), receiver, tokenId);\\n\\n            emit NFTBridgeUnLocked(receiver, nft, tokenId, nftLocked.originalGameId, nftLocked.destinationGameId);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40575f68de7301f561afa9d69861c406fc46941f9f6215a86dd88d1af591ece2\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0x0963cae564202bb3d863359ea15253cc986ec30b76f386606af436018782cc0f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\",\"keccak256\":\"0xdcbd022776a9f0a210aa82318c0422cdd32e6f15892c9388f8b4a555a6de32d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516109e93803806109e9833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b6080516108d2610117600039600061025f01526108d26000f3fe6080604052600436106100385760003560e01c8063150b7a02146100445780634202e90714610081578063ae5a3bcd146100aa5761003f565b3661003f57005b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906105b7565b6100ea565b604051610078919061067a565b60405180910390f35b34801561008d57600080fd5b506100a860048036038101906100a39190610695565b61025d565b005b3480156100b657600080fd5b506100d160048036038101906100cc91906106fc565b61046a565b6040516100e1949392919061075e565b60405180910390f35b60008060008085858101906100ff91906107a3565b9250925092506040518060800160405280888152602001848152602001838152602001828152506000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050863373ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f1d6e04d843ef58bdf35ac8a0cb66dd9cb280581f046787890ebd7e45f0027fe486868660405161023f939291906107f6565b60405180910390a463150b7a0260e01b935050505095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102b557600080fd5b60008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905081816060015103610463578373ffffffffffffffffffffffffffffffffffffffff166342842e0e3087866040518463ffffffff1660e01b81526004016103c09392919061083c565b600060405180830381600087803b1580156103da57600080fd5b505af11580156103ee573d6000803e3d6000fd5b50505050828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f5691ac3780c81fe5c5620072c92ff7084adc85a05ee20c51ef10aceee184ddbb8460200151856040015160405161045a929190610873565b60405180910390a45b5050505050565b600060205282600052604060002060205281600052604060002060205280600052604060002060009250925050508060000154908060010154908060020154908060030154905084565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104e9826104be565b9050919050565b6104f9816104de565b811461050457600080fd5b50565b600081359050610516816104f0565b92915050565b6000819050919050565b61052f8161051c565b811461053a57600080fd5b50565b60008135905061054c81610526565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261057757610576610552565b5b8235905067ffffffffffffffff81111561059457610593610557565b5b6020830191508360018202830111156105b0576105af61055c565b5b9250929050565b6000806000806000608086880312156105d3576105d26104b4565b5b60006105e188828901610507565b95505060206105f288828901610507565b94505060406106038882890161053d565b935050606086013567ffffffffffffffff811115610624576106236104b9565b5b61063088828901610561565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6106748161063f565b82525050565b600060208201905061068f600083018461066b565b92915050565b600080600080608085870312156106af576106ae6104b4565b5b60006106bd87828801610507565b94505060206106ce87828801610507565b93505060406106df8782880161053d565b92505060606106f08782880161053d565b91505092959194509250565b600080600060608486031215610715576107146104b4565b5b600061072386828701610507565b935050602061073486828701610507565b92505060406107458682870161053d565b9150509250925092565b6107588161051c565b82525050565b6000608082019050610773600083018761074f565b610780602083018661074f565b61078d604083018561074f565b61079a606083018461074f565b95945050505050565b6000806000606084860312156107bc576107bb6104b4565b5b60006107ca8682870161053d565b93505060206107db8682870161053d565b92505060406107ec8682870161053d565b9150509250925092565b600060608201905061080b600083018661074f565b610818602083018561074f565b610825604083018461074f565b949350505050565b610836816104de565b82525050565b6000606082019050610851600083018661082d565b61085e602083018561082d565b61086b604083018461074f565b949350505050565b6000604082019050610888600083018561074f565b610895602083018461074f565b939250505056fea2646970667358221220ecaa08d8fd98d01f6521dee869fe25980996d01d55a9c077dc5305fbda17b66364736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100385760003560e01c8063150b7a02146100445780634202e90714610081578063ae5a3bcd146100aa5761003f565b3661003f57005b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906105b7565b6100ea565b604051610078919061067a565b60405180910390f35b34801561008d57600080fd5b506100a860048036038101906100a39190610695565b61025d565b005b3480156100b657600080fd5b506100d160048036038101906100cc91906106fc565b61046a565b6040516100e1949392919061075e565b60405180910390f35b60008060008085858101906100ff91906107a3565b9250925092506040518060800160405280888152602001848152602001838152602001828152506000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050863373ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f1d6e04d843ef58bdf35ac8a0cb66dd9cb280581f046787890ebd7e45f0027fe486868660405161023f939291906107f6565b60405180910390a463150b7a0260e01b935050505095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102b557600080fd5b60008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905081816060015103610463578373ffffffffffffffffffffffffffffffffffffffff166342842e0e3087866040518463ffffffff1660e01b81526004016103c09392919061083c565b600060405180830381600087803b1580156103da57600080fd5b505af11580156103ee573d6000803e3d6000fd5b50505050828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f5691ac3780c81fe5c5620072c92ff7084adc85a05ee20c51ef10aceee184ddbb8460200151856040015160405161045a929190610873565b60405180910390a45b5050505050565b600060205282600052604060002060205281600052604060002060205280600052604060002060009250925050508060000154908060010154908060020154908060030154905084565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104e9826104be565b9050919050565b6104f9816104de565b811461050457600080fd5b50565b600081359050610516816104f0565b92915050565b6000819050919050565b61052f8161051c565b811461053a57600080fd5b50565b60008135905061054c81610526565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261057757610576610552565b5b8235905067ffffffffffffffff81111561059457610593610557565b5b6020830191508360018202830111156105b0576105af61055c565b5b9250929050565b6000806000806000608086880312156105d3576105d26104b4565b5b60006105e188828901610507565b95505060206105f288828901610507565b94505060406106038882890161053d565b935050606086013567ffffffffffffffff811115610624576106236104b9565b5b61063088828901610561565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6106748161063f565b82525050565b600060208201905061068f600083018461066b565b92915050565b600080600080608085870312156106af576106ae6104b4565b5b60006106bd87828801610507565b94505060206106ce87828801610507565b93505060406106df8782880161053d565b92505060606106f08782880161053d565b91505092959194509250565b600080600060608486031215610715576107146104b4565b5b600061072386828701610507565b935050602061073486828701610507565b92505060406107458682870161053d565b9150509250925092565b6107588161051c565b82525050565b6000608082019050610773600083018761074f565b610780602083018661074f565b61078d604083018561074f565b61079a606083018461074f565b95945050505050565b6000806000606084860312156107bc576107bb6104b4565b5b60006107ca8682870161053d565b93505060206107db8682870161053d565b92505060406107ec8682870161053d565b9150509250925092565b600060608201905061080b600083018661074f565b610818602083018561074f565b610825604083018461074f565b949350505050565b610836816104de565b82525050565b6000606082019050610851600083018661082d565b61085e602083018561082d565b61086b604083018461074f565b949350505050565b6000604082019050610888600083018561074f565b610895602083018461074f565b939250505056fea2646970667358221220ecaa08d8fd98d01f6521dee869fe25980996d01d55a9c077dc5305fbda17b66364736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY. THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE. DO NOT USE THIS CODE IN PRODUCTION.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2031,
        "contract": "contracts/SourceMinter.sol:SourceMinter",
        "label": "locked",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(NFTBridgeLocked)1996_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(NFTBridgeLocked)1996_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => struct SourceMinter.NFTBridgeLocked)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_struct(NFTBridgeLocked)1996_storage))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(NFTBridgeLocked)1996_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct SourceMinter.NFTBridgeLocked))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(NFTBridgeLocked)1996_storage)"
      },
      "t_mapping(t_uint256,t_struct(NFTBridgeLocked)1996_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SourceMinter.NFTBridgeLocked)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTBridgeLocked)1996_storage"
      },
      "t_struct(NFTBridgeLocked)1996_storage": {
        "encoding": "inplace",
        "label": "struct SourceMinter.NFTBridgeLocked",
        "members": [
          {
            "astId": 1989,
            "contract": "contracts/SourceMinter.sol:SourceMinter",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1991,
            "contract": "contracts/SourceMinter.sol:SourceMinter",
            "label": "originalGameId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1993,
            "contract": "contracts/SourceMinter.sol:SourceMinter",
            "label": "destinationGameId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1995,
            "contract": "contracts/SourceMinter.sol:SourceMinter",
            "label": "destinationChainSelector",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}